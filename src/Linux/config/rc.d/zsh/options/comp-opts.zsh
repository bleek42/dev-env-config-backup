#!/usr/bin/env zsh

###*-ZSH COMPLETION OPTIONS------------------------------------------------------------------------#
###* https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Description                    #
###* https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System               #
###* https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Configuration #
## ? Figuring out keyboard sequences in the current terminal ##################
## ? The journey towards "the perfect key definitions"[tm].
## ?
## ?   THIS IS INCOMPLETE.
## ?
## ? We'll go about it like this:
## ?   - if there's zsh/terminfo and $terminfo[] "looks good", use it.
## ?   - if there's zsh/termcap and $termcap[] "looks good", use it.
## ?   - if neither is there, fall back to zkbd.
## ?   - if zkbd fails for some reason, create a setup-file-skeleton
## ?     for the terminal-OS combination in question.
## ?
## ? Slight deviation from the rules, we just established:
## ?   If the user marks a database entry as broken, directly fall back
## ?   to zkbd:
## ? % zstyle ':keyboard:$VENDOR:$OSTYPE:$TERM:*:*' broken (terminfo|termcap|both)
## ?
## ?   Also, allow for overwriting key definitions:
## ? % zstyle ':keyboard:$VENDOR:$OSTYPE:$TERM:terminfo:Home' overwrite $'\e[1~'
## ?
## ? Styles *have* to be set *before* sourcing this file.
## ? Also, this files expects pretty much zsh-mode default options. So,
## ? set your crazy options *after* sourcing this file.
## ?
## ? Note, that this file does *NOT* bind anything for you. It merely
## ? populates the $key[] hash, which you can later use to bind your keys,
## ? like this:
## ?   [[ -n ${key[Home]} ]] && bindkey ${key[Home]} beginning-of-line
## ?
###*################################################################################################
###*################################################################################################

zmodload zsh/complist

### ? shell emulation options
setopt posix_builtins  # ! when set, the command 'builtin' can be used to execute shell builtins
unsetopt sh_word_split # ! use zsh style word splitting
unsetopt flow_control  # ! disable flow control (stop/start with ctrl-s/ctrl-q)
# setopt sh_word_split   # ! split fields on unquoted parameter expansions (bash compatibility)

### ? prompt / substring options
setopt prompt_subst      # ! enable command substitution in prompt
setopt magic_equal_subst # ! enable filename expansion for arguments of the form ‘anything=expression’

### ? completion option
# setopt menu_complete # ! enable menu completion
setopt auto_menu     # ! show completion menu on successive tab press
setopt auto_list     # ! automatically list choices on ambiguous completion
setopt complete_in_word
setopt always_to_end    # ! move cursor to the end of a completed word
setopt complete_aliases # ! don't expand aliases _before_ completion has finished
setopt auto_param_keys  # ! intelligently remove automatically inserted characters when completing
setopt auto_param_slash # ! when completing a directory name add a slash instead of a space
setopt hash_list_all    # ! whenever a command completion is attempted, make sure the entire command path is hashed first
setopt complete_in_word # ! allow completion from within a word/phrase
setopt always_to_end    # ! move cursor to the end of a completed word
setopt list_types       # ! mark type of completion suggestions
unsetopt correct        # ! auto correct mistakes

### ? in/output options
setopt mark_dirs # ! append '/' to dirnames generated by globbing
setopt nomatch   # ! print an error if a glob didn't return a result

### ? chdir options
setopt auto_pushd
setopt pushd_ignore_dups # ! don't push the same dir twice
setopt pushdminus
# setopt rm_star_wait     # ! wait for 10 seconds confirmation when running rm with *
# unsetopt rm_star_silent # ! notify when rm is running with *

COMPLETION_WAITING_DOTS=true

## ? How many completions should be shown in menu selection
zstyle ':completion:*' menu=long select search
zstyle ':completion:*:*:*:*:*' menu=4 select search # ? How many completions switch on menu selection
zstyle ':completion:*' accept-exact '*(N)'          # ? Prevent comp to glob the first part of the path to avoid partial globs. (Performance)
zstyle ':completion:*' complete true
zstyle ':completion:*' rehash true
zstyle ':completion:*' keep-prefix true
zstyle ':completion:*' special-dirs true ## ? Complete . and .. special directories
zstyle ':completion:*' verbose yes
zstyle ':completion:*' file-sort name
zstyle ':completion:*' use-cache on ## ? Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
zstyle ':completion:*' group-name '' ## ? Required for completion to be in good groups (named after the tags)

if [[ -x $(command -v vivid) ]]; then
    export LS_COLORS="$(vivid generate jellybeans)"
    export ZLS_COLORS="$LS_COLORS"
fi

## ? Adjust color-completion style
zstyle ':completion:*:' list-colors "${(s.:.)LS_COLORS}"
# zstyle -e ':completion:*:*:*:*' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==34=12}:${(s.:.)LS_COLORS}")'

## ? case insensitive (all), partial-word and substring completion
if [[ "$CASE_SENSITIVE" = true ]]; then
    zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
else
    if [[ "$HYPHEN_INSENSITIVE" = true ]]; then
        zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]-_}={[:upper:][:lower:]_-}' 'r:|=*' 'l:|=* r:|=*'
    else
        zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|=*' 'l:|=* r:|=*'
    fi
fi
unset CASE_SENSITIVE HYPHEN_INSENSITIVE

zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

## ! The +X flag makes the function load faster by disabling the tracing of the function body.
autoload -Uz _expand _complete _match _extensions _generic _ignored _files .force_rehash
# zle -C .force_rehash
# zstyle ':completion:*' completer _expand _complete _match _ignored _files _extensions
# zstyle ':completion:*' completer _expand .force_rehash _complete _match _files _extensions
zstyle ':completion:*' completer _expand _complete _match _files _extensions _ignored
## ! Complete the alias when _expand_alias is used as a function
# autoload -Uz _expand_alias
# zle -C alias-expansion complete-word _generic
# bindkey '^Xa' alias-expansion
# zstyle ':completion:alias-expansion:*' completer _expand_alias _complete _generic

# Fuzzy match mistyped completions.

## ? Define completers
zstyle ':completion:*:expand:*' tag-order all-expansions
zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins commands functions options parameters reserved-words

# zstyle ':completion:*:aliases' list-colors '=*=0;38;2;166;226;46'
# zstyle ':completion:*:builtins' list-colors '=*=0;38;2;253;151'
# zstyle ':completion:*:functions' list-colors '=*=0;38;2;243;249;157'
# zstyle ':completion:*:commands' list-colors '=*=0;38;2;165;255;195'
# zstyle ':completion:*:options' list-colors '=*=0;38;2;153;173;106'
# zstyle ':completion:*:parameters' list-colors '=*=0;38;2;210;15;57'
# zstyle ':completion:*:reserved-words' list-colors '=*=0;38;2;0;255;135'

# ## ! disable sort when completing options of any command
zstyle ':completion:complete:*:options' sort false

zstyle ':completion:*:options' description yes
zstyle ':completion:*:options' auto-description '[%d]'

zstyle ':completion:*' list-prompt '󰄾 %l 󱔢'

# zstyle ':completion:default' list-prompt '⌾ %l ⎢'
zstyle ':completion:*' select-prompt '* %m -> %l %p'
# -zstyle ':completion:*:default' select-prompt \
# -    "${fg[118]}* ${fg[046]}%m ${fg[226]}-> ${fg[118]}%l ${fg[222]}%p${fx[reset]}"

zstyle ':completion:*:default' format '» %d'
zstyle ':completion:*:descriptions' format "[ %d ]"
zstyle ':completion:*:corrections' format '( ⨯ %d / %e)'
zstyle ':completion:*:messages' format '(  %d )'
zstyle ':completion:*:warnings' format '( ⚠ %d )'

# -zstyle ':completion:*:*:*:*' format \
# -    "${fg_bold[118]}»»${fg[102]}%d${fg_bold[118]}««${fx[reset]}"

# -zstyle ':completion:*:*:*:*:descriptions' format \
# -    "${fg[046]}»»[${fg[104]}%d${fg[046]}]««${fx[reset]}"

# -zstyle ':completion:*:*:*:*:corrections' format \
# -    "${fg[118]}[ ${fg[75]}󱋴  %d ${fg[118]}] ${fg[105]}(  %e )${fx[reset]}"

# -zstyle ':completion:*:*:*:*:messages' format \
# -    "${fg[046]}[ ${fg[105]}󱋵 %d${fg[046]}]${fx[reset]}"

# -zstyle ':completion:*:*:*:*:warnings' format \
# -    "${fg[155]}[ ${fg[118]} %d ${fg[155]}]${fx[reset]}"

# # ? acomplete manual by their section
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections true
zstyle ':completion:*:man:*' menu yes select

## ? aAdjust mismatch handling - allow one error for every three characters typed in approximate completer
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

## ? aSearch path for sudo completion
zstyle ':completion::complete:*' gain-privileges 1
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
    /usr/local/bin \
    /usr/sbin \
    /usr/bin \
    /sbin \
    /bin \
    /usr/X11R6/bin

# # ## ? a Host completion
# typeset -ag _etc_hosts _ssh_config _ssh_config_hosts
# [[ -r ${HOME}/.ssh/known_hosts ]]  && \
#     _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || \
# #     _ssh_hosts=()

# [[ -r /etc/hosts ]] && \
#     : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || \
#     _etc_hosts=()

# [[ -r ${HOME}/.ssh/config ]] && \
#     _ssh_config_hosts=(${=${${${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }:#*\**}:#*\?*}}) || \
#     _ssh_config_hosts=()

# hosts=(
# 	"$HOST"
# 	"$_ssh_config_hosts[@]"
# 	"$_ssh_hosts[@]"
# 	"$_etc_hosts[@]"
# 	localhost
# )

# typeset -A hosts
# hosts=()

## ? SSH/SCP/RSYNC
if [[ -x $(command -v bat) ]]; then
    zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts \
        'reply=(${=${${(f)"$(bat ${hosts}(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

else
    zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts \
        'reply=(${=${${(f)"$(cat ${hosts}(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
fi

# zstyle ':completion::*:*:*:hosts' hosts "${hosts}"
# zstyle ':completion:*:ssh:*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'

zstyle ':completion:*:(ssh|rsync|sftp|rsh):*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(scp|rsync|sftp|rsh):*' tag-order 'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'
zstyle ':completion:*:(scp|rsync|sftp|rsh):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '255.255.255.255' '::1' 'fe80::*'

# Prevent these filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.(o|c~|old|pro|zwc)' '*~'

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*( *[a-z])*=34=31=33'
zstyle ':completion:*:*:killall:*:processes-names' list-colors '=(#b) #([0-9]#) ([0-9a-z\-]#)*=01;34=0=01'

# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:kill:*' command 'ps -u "${USER}" -o pid,%cpu,tty,user,cmd -w -w '
zstyle ':completion:*:*:*:*:processes' command 'ps -u "${USER}" -o pid,%cpu,tty,user,cmd -w -w'

## ! Only display some tags for the command cd
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories

## ? a Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
    adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
    clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
    gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
    ldap lp mail mailman mailnull man messagebus mldonkey mysql nagios \
    named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
    operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
    rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
    usbmux uucp vcsa wwwrun xfs '_*'

## ! disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

zstyle '*' single-ignored show

## ? automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit

if command -v fzf >/dev/null 2>&1; then

    _fzf_comprun() {
        local command=$1
        shift

        case "${command}" in
        cd | zd)
            fd --hidden --type d --exclude ".git" . | fzf --preview 'lsd --tree -I=".git" -aA  -d {}' "$@"
            ;;
        export | set | unset | typeset)
            fzf --preview "eval 'echo \$'{}" "$@"
            ;;
        ssh)
            fzf --preview 'dig {}' "$@"
            ;;
        *)
            fzf --preview 'bat -n -f {}' "$@"
            ;;
        esac
    }

    _fzf_compgen_path() {
        rg --files --glob "!.git" . "$1"
    }

    _fzf_compgen_dir() {
        fd --type d --hidden --follow --exclude ".git" . "$1"
    }

    # Advanced customization of fzf options via _fzf_comprun function
    # - The first argument to the function is the name of the command.
    # - You should make sure to pass the rest of the arguments to fzf.
    _fzf_comprun() {
        local command=$1
        shift

        case "$command" in
        cd | zd)
            fzf --preview 'tree -C {} | head -200' "$@"
            ;;
        export | unset) ;;
        esac
    }

    # --preview '([[ -f {} ]] && ( bat -f {} || cat {}))
    #             ||
    #         ([[ -d {} ]] && (tree \"\.git\" {} || tree -aCI \"\.git\" {} | less info -n -q)) {}'

    # export FD_DEFAULT_COMMAND='fdfind --hidden -exclude ".git" --follow -f'
    # export AG_DEFAULT_COMMAND=''
    # export RG_DEFAULT_COMMAND='rg --column --line-number --no-heading --color=always --smart-case'

    typeset -g editor_symbol visual_symbol

    case "${EDITOR}" in
    *nvim*)
        editor_symbol=''
        ;;
    *vim*)
        editor_symbol=''
        ;;
    *)
        editor_symbol='󱔽'
        ;;
    esac

    case "${VISUAL}" in
    *codium* | *code*)
        visual_symbol='󰨞'
        ;;
    *)
        visual_symbol='󰘙'
        ;;
    esac

    export FZF_DEFAULT_COMMAND='fd -H -L -i -g ""'
    # export FZF_DEFAULT_COMMAND='ag -S -f --hidden --ignore "*.git" -g ""'

    __fzf_default_header="[^G: 󰱞 |^W:  |^SPC: 󰒅 |^A/^U: 󰒆 |^Y:  | ^O:  |^?:  |Alt+J/K: 󰏕/󰏔 |^F/^B: ↑/↓ |^E: ${editor_symbol} |^V: ${visual_symbol}]"

    # __fzf_default_colors='fg:#f0f0f0,bg:#252c31,bg+:#005f5f,hl:#87d75f,gutter:#252c31'
    # __fzf_default_info_colors='query:#ffffff,prompt:#f0f0f0,pointer:#dfaf00,marker:#00d7d7'

    __fzf_histfile="${XDG_CACHE_HOME:-${HOME}/.cache}/zsh/fzf-histfile"

    __fzf_preview_files='lsd --color=always -1 -aA -F -L --extensionsort --group-dirs=first '
    __fzf_preview_dirs='lsd --color=always --tree --blocks=permission,user,size,date,name -a -d'
    __fzf_default_preview="([[ -f {} ]] && (bat -f {} || cat {})) || \
                            ([[ -d {} ]] && (lsd --color=always --tree -A -F -d {}) || tree -C -a -f -L 2 {}) || \
                            echo {} 2> /dev/null | bat -f || echo {} 2> /dev/null | less -Rf"

    __fzf_colors_fg_bg="fg:#33cfad,fg+:#46e253,bg:#121212,bg+:#231f32"
    __fzf_colors_info_marker_hl="hl:#77c6d6,hl+:#3d9d47,info:#afaf87,marker:#5ed7d7"
    __fzf_colors_prompt_icons="prompt:#03ff1c,spinner:#1081f2,pointer:#8dee0e,header:#87afaf"
    __fzf_colors_border="gutter:#1d1717,border:#4afbfb"
    __fzf_colors_label="label:#aeaeae,query:#d9d9d"

    export FZF_DEFAULT_OPTS="-i \
                -e \
                -m \
                --ansi \
                --cycle \
                --sync \
                --info='inline' \
                --border=sharp \
                --reverse \
                --height='60%' \
                --min-height='54' \
                --padding='2' \
                --margin='1' \
                --header-first \
                --header='${__fzf_default_header}' \
                --preview-window='right:50%:hidden:border-sharp:wrap:~4' \
                --preview='${__fzf_default_preview}'
                --color='${__fzf_colors_fg_bg}','${__fzf_colors_info_marker_hl}','${__fzf_colors_prompt_icons}','${__fzf_colors_border}' \
                --history='${__fzf_histfile}' \
                --history-size=8000 \
                --prompt='' \
                --pointer='->' \
                --marker='*' \
                --select-1 \
                --exit-0 \
                --bind='ctrl-/:toggle-preview' \
                --bind='ctrl-space:toggle+down' \
                --bind='ctrl-a:toggle-all' \
                --bind='ctrl-u:deselect-all' \
                --bind='ctrl-e:execute($EDITOR {+} < /dev/tty > /dev/tty)' \
                --bind='ctrl-v:execute($VISUAL {+})' \
                --bind='alt-j:preview-down' \
                --bind='alt-k:preview-up' \
                --bind='ctrl-f:preview-page-down' \
                --bind='ctrl-b:preview-page-up' \
                --bind='ctrl-o:accept-non-empty'"

    # --color='${__fzf_colors_info_marker_hl}'
    # fzf settings. Uses fdfind for a faster alternative to `find`.
    # Preview file content using  bat (https://github.com/sharkdp/)bat
    export FZF_CTRL_T_COMMAND='rg --column --line-number --no-heading --color=always --smart-case ""'
    export FZF_CTRL_T_OPTS="\
                    --height 60% \
                    --border sharp \
                    --reverse \
                    --prompt '∷ ' \
                    --pointer '▶ ' \
                    --marker *"

    # ? to toggle small preview window to see the full command
    # CTRL-Y to copy the command into clipboard using pbcopy
    # export FZF_CTRL_R_OPTS="\
    #               --preview 'echo {}' --preview-window 'down:~4:wrap' \
    #         --header-first --header 'Press CTRL-Y to copy command into clipboard' \
    #               --color 'header:italic' --inline-info \
    #               --bind 'ctrl-/:toggle-preview' \
    #               --bind 'ctrl-x:execute-silent(echo -n {2..} | pbcopy)+abort'"

    # use fdfind for finding directories and files
    # export FZF_CHANGE_DIR_FIND_COMMAND="$FZF_DEFAULT_COMMAND"
    # export FZF_INSERT_DIR_COMMAND="$FZF_DEFAULT_COMMAND"
    # export FZF_INSERT_FILES_COMMAND="$FZF_DEFAULT_COMMAND"
    # export FZF_EDIT_FILES_COMMAND="$FZF_DEFAULT_COMMAND"
    # export FZF_ALT_C_COMMAND="${FZF_DEFAULT_COMMAND}"

    # # Print tree structure in the preview window
    export FZF_ALT_C_COMMAND="${FZF_CTRL_T_COMMAND}"
    export FZF_ALT_C_OPTS="${FZF_CTRL_T_OPTS}"

    # zstyle ':complete:px:*:*:*:processes' command "px --top "

    # force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
    has_fzf_tab_func="$(type fzf-tab-complete)"

    if [[ $has_fzf_tab_func == *'fzf-tab-complete is a shell function'* ]]; then
        echo "fzf-tab keybinding detected: initializing relevant completions..."

        test -f "${FZF_TAB_HOME}/modules/Src" && module_path+=("${FZF_TAB_HOME}/modules/Src")
        zstyle ':completion:*' menu no
        # zstyle ':completion:*:*:*:*:*' menu no
        zstyle ':fzf-tab:*' fzf-command fzf
        zstyle ':fzf-tab:*' prefix ' '
        zstyle ':fzf-tab:*' query-string input
        zstyle ':fzf-tab:*' show-group full
        zstyle ':fzf-tab:*' switch-group '<' '>'
        zstyle ':fzf-tab:*' accept enter
        zstyle ':fzf-tab:*' continuous-trigger space
        zstyle ':fzf-tab:*' fzf-bindings enter:accept

        zstyle ':fzf-tab:complete:*' disabled-on none
        zstyle ':fzf-tab:complete:*' fzf-preview 'less ${realpath#-*=}'
        # zstyle ':fzf-tab:user-expand::' fzf-flags '-m -e -i --layout reverse --info inline --preview-window right:border-vertical:~4:wrap --pointer=" " --marker "* "'
        # zstyle ':fzf-tab:complete:(\\|)(htop|px):argument-rest' fzf-flags '--preview-window right:border-vertical:~4:wrap'
        # zstyle ':fzf-tab:complete:(kill|ps|px):argument-rest' fzf-flags '--preview-window right:border-vertical:~4:wrap'

        # zstyle ':fzf-tab:*'

        zstyle ':fzf-tab:complete:*' fzf-bindings \
            '~:accept' \
            'ctrl-v:execute-silent(${_FTB_INIT_} $VISUAL $realpath)' \
            'ctrl-e:execute-silent(${_FTB_INIT_} $EDITOR $realpath)'

        # User expand
        zstyle ':fzf-tab:user-expand:' fzf-preview 'less $word'

        zstyle ':fzf-tab:complete:*' fzf-preview 'less ${realpath#-*=}'

        zstyle ':fzf-tab:complete:(-equal-:|(\\|*/|)(sudo|proxychains|strace):argument-1|pudb:option--pre-run-1)' fzf-preview \
            '[[ $group == 'external command' ]] && less =$word'

        # # Command
        zstyle ':fzf-tab:complete:(-command-:|command:option-(v|V)-rest)' fzf-preview \
            'case $group in
            "executable file") less ${realpath#--*=}
                ;;
            "builtin command") run-help $word |  bat -f -p
                ;;
            "external command*) less $word
                ;;
            *) echo ${(P)word}
                ;;
        esac'

        zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

        # -brace-parameter- will `fork/exec /usr/bin/zsh: invalid argument`
        zstyle ':fzf-tab:complete:((-parameter-|unset):|(export|typeset|declare|local):argument-rest)' fzf-preview \
            'echo ${(P)word}'

        zstyle ':fzf-tab:complete:(\\|*/|)man:*' fzf-preview 'man $word'

        zstyle ':fzf-tab:complete:(\\|)help:*' fzf-preview 'help $word'

        zstyle ':fzf-tab:complete:(\\|)run-help:*' fzf-preview 'run-help $word'

        zstyle ':fzf-tab:complete:(cd|zd):*' fzf-preview \
            'lsd --tree -I="*.git" --color=always --extensionsort --group-dirs=first -aA -d $realpath'

        zstyle ':fzf-tab:complete:(ls|lsd|exa|eza):*' fzf-preview \
            'lsd --tree -I="*.git" --color=always --extensionsort --group-dirs=first -aA -d $realpath'

        zstyle ':fzf-tab:complete:(\\|*/|)type:argument-rest' fzf-preview 'type $word'

        zstyle ':fzf-tab:complete:(\\|*/|)uname:options' fzf-preview 'uname $word | bat -p -l help'

        zstyle ':fzf-tab:complete:(\\|)bindkey:option-M-1' fzf-preview \
            'case $group in
		keymap) bindkey -M $word | bat -f -p -l ini
		;;
	esac'

        zstyle ':fzf-tab:complete:(\\|*/|)tar:' fzf-preview 'tar tvaf $word'

        zstyle ':fzf-tab:complete:(\\|*/|)unzip:argument-1' fzf-preview \
            '[[ -f $realpath ]] && unzip -Z $realpath || less $realpath'

        zstyle ':fzf-tab:complete:(\\|*/|)tput:set3-argument-1' fzf-preview 'tput $word'

        # curl completion sources, destinations, protocols
        zstyle ':fzf-tab:complete:(\\|*/|)curl:argument-rest' fzf-preview 'curl -I $word 2>/dev/null |  bat -f -p -l=yaml'

        # du completion
        zstyle ':fzf-tab:complete:(\\|*/|)du:argument-rest' fzf-preview 'grc --colour=on du -sh $realpath'

        # df completion
        zstyle ':fzf-tab:complete:(\\|*/|)df:argument-rest' fzf-preview \
            '[[ $group != "[device label]" ]] && grc --colour=on df -Th $word'

        # scp/rsync completion sources, destinations, protocols
        zstyle ':fzf-tab:complete:(\\|*/|)(ssh|scp|rsync):argument-rest' fzf-preview \
            'case $group in
            file) less ${realpath#--*=}
            ;;
            user) finger $word
            ;;
            *host*) grc --colour=on ping -c1 $word
            ;;
			*) echo ${(P)word}
        esac'

        zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'

        zstyle ':fzf-tab:complete:systemctl-show:*' fzf-preview 'systemctl show $word |  bat -f -p -l ini'

        zstyle ':fzf-tab:complete:systemctl-cat:*' fzf-preview 'systemctl cat $word |  bat -f -p -l ini'

        zstyle ':fzf-tab:complete:systemctl-help:*' fzf-preview 'systemctl help $word 2>/dev/null |  bat -f -p -l=help'

        zstyle ':fzf-tab:complete:(\\|*/|)systemctl-list-dependencies:*' fzf-preview \
            'case $group in
        unit) SYSTEMD_COLORS=1 systemctl list-dependencies $word
        ;;
    esac'

        # journalctl logs
        zstyle ':fzf-tab:complete:(\\|*/|)journalctl:*' fzf-preview \
            'case $group in
        'boot '*) journalctl -b $word |  bat -f -p -l=log
    ;;
        '/dev files') journalctl -b /dev/$word |  bat -f -p -l=log
    ;;
        commands) journalctl $word | bat -f -pllog
    ;;
        'possible values') journalctl -u $word |  bat -f -p -l=log
    ;;
esac'

        zstyle ':fzf-tab:complete:(-equal-:|(\\|*/|)(sudo|proxychains|strace):argument-1|pudb:option--pre-run-1)' fzf-preview \
            '[[ $group == 'external command' ]] &&  bat -f -p $word'

        # give a preview of commandline arguments when completing `kill/all` or 'ps/px'
        zstyle ':fzf-tab:complete:(\\|*/|)(kill|killall|ps|px):argument-rest' fzf-preview \
            '[[ $group == "[process ID]" ]] && htop -d 16 --pid=$word || ps --pid=$word -o cmd,pid,user,comm -w -w'

        zstyle ':fzf-tab:complete:(\\|*/|)jq:argument-rest' fzf-preview \
            '[[ -f $realpath ]] && jq -Cr . $realpath 2>/dev/null || less $realpath'

        zstyle ':fzf-tab:complete:(\\|*/|)nmap:argument-rest' fzf-preview 'nmap $word'

        zstyle ':fzf-tab:complete:(\\|*/|)ip:' fzf-preview \
            'case $group in
        'ip command') ip $word help 2>&1 |  bat -f -p -l help
        ;;
    esac'

        zstyle ':fzf-tab:complete:(\\|*/|)xdg-settings:' fzf-preview \
            'file=$(xdg-settings get $word)
            [[ -n $file ]] && less {/usr,~/.local,~/.local/state/nix/profile,/run/current-system/sw}/share/applications/$file(N)'

        zstyle ':fzf-tab:complete:git-(diff|restore):*' fzf-preview 'git diff $word |  bat -f -r :16'

        zstyle ':fzf-tab:complete:git-log:*' fzf-preview 'git log $word |  bat -f -r :16'

        zstyle ':fzf-tab:complete:git-help:*' fzf-preview 'git help $word |  bat -f -r :16'

        zstyle ':fzf-tab:complete:git-show:*' fzf-preview \
            'case $group in
	        "commit tag") git show  $word |  bat -f -n -r :16
            ;;
	        *) git show $word |  bat -f -n -r :16
            ;;
	    esac'

        zstyle ':fzf-tab:complete:git-checkout:*' fzf-preview \
            'case $group in
	        "modified file") git diff $word |  bat -f -n -r :16
            ;;
	        "recent commit object name") git show -f $word |  bat -f -n -r :16
            ;;
	        *) git log -f $word |  bat -f -n -r :16
            ;;
	    esac'

        zstyle ':fzf-tab:complete:gh:' fzf-preview 'gh help $word |  bat -f -p -l help'

        zstyle ':fzf-tab:complete:(\\|*/|)apt(|-cache):argument-rest' fzf-preview 'apt-cache show $word |  bat -f -p'

        zstyle ':fzf-tab:complete:(\\|*/|)nala(|-install):argument-rest' fzf-preview 'nala show $word |  bat -f -p'

        zstyle ':fzf-tab:complete:(\\|*/|)npm:' fzf-preview 'npm help -l $word |  bat -f -n -l markdown'

        zstyle ':fzf-tab:complete:pnpm:' fzf-preview 'pnpm help $word | bat -f -n -l markdown'

        zstyle ':fzf-tab:complete:(\\|*/|)neofetch:argument-rest' fzf-preview 'neofetch $word |  bat -f -p'

        zstyle ':fzf-tab:complete:(\\|*/|)progress:*' fzf-preview \
            'case $group in
        'external command') progress -c $word
        ;;
        'process ID') progress -p $word
        ;;
    esac'

        zstyle ':fzf-tab:complete:tmux:argument-rest' fzf-preview \
            'case $word in
        (show|set)(env|-environment)) tmux ${word/set/show} -g | bat -f -p -l sh
        ;;
        (show|set)(-hook?|(-window)-option?|w|)) tmux ${word/set/show} -g | bat -f -p -l=sv
        ;;
        (show|set)(msgs|-message?)) tmux ${word/set/show} | bat -f -p -l log
        ;;
        (show|set)(b|-buffer)) tmux ${word/set/show}
        ;;
        (ls|list-)*) tmux $word
        ;;
    esac'

        zstyle ':fzf-tab:complete:(\\|)zi-*' fzf-preview \
            'case $group in
            plugins) bat -f -l=md ~/.local/share/zsh/plugins/$word/README*
        ;;
            )
    esac'

        # Docker
        zstyle ':fzf-tab:complete:docker-container:argument-1' fzf-preview 'docker container $word --help |  bat -f -p'

        zstyle ':fzf-tab:complete:docker-image:argument-1' fzf-preview 'docker image $word --help |  bat -f -p'

        zstyle ':fzf-tab:complete:docker-inspect:' fzf-preview 'docker inspect $word |  bat -f -p'

        zstyle ':fzf-tab:complete:docker-(run|images):argument-1' fzf-preview 'docker images $word |  bat -f -p'

        zstyle ':fzf-tab:complete:((\\|*/|)docker|docker-help):argument-1' fzf-preview 'docker help $word |  bat -f -p'

        # * fzf in hidden files, optional arg: location
        fz() {
            local location="${1}"
            local cmd="fdfind --hidden --exclude \.git -f"
            if [[ -z "${location}" ]]; then
                cmd="${cmd} --strip-cwd-prefix"
            else
                cmd="${cmd} . ${location}"
            fi
            eval "${cmd}" |
                fzf-tmux-digdown -p90% \
                    --bind "enter:execute([[ -f {} ]] && LESS='--RAW-CONTROL-CHARS'  bat -f --paging=always {})" \
                    --bind "ctrl-r:reload(${cmd})" \
                    --header 'Enter: VIEW | ^R: RELOAD'
            return 0
        }

        # * Browse docker containers
        fzd() {
            # Optionally: colorize log preview via ` | ccze -m ansi` (ccze needs to be installed first via apt install ccze)
            local get_id="\$(echo {} | cut --delimiter=\" \" --fields=1)"
            # Note: After arg query, we must use =. Otherwise and empty arg list won't work.
            local opts="${FZF_DEFAULT_OPTS}
            --preview 'docker logs ${get_id}'
            --preview-window right:80%:hidden
            --bind 'ctrl-e:execute(docker exec --interactive --tty ${get_id} bash < /dev/tty > /dev/tty)'
            --bind 'alt-i:execute(docker inspect ${get_id} |  bat -n -f --language=cjson )'
            --bind 'alt-e:execute(docker exec --user root ${get_id} bash -c \"apt-get update \
                                    && apt-get install --yes curl telnet\" \
                                    | bash && exec bash --login\")'
            --bind 'enter:execute(docker logs ${get_id} | LESS=\"--RAW-CONTROL-CHARS\" less --LINE-NUMBERS +G)'
            --bind 'alt-enter:execute(echo {} \
                                        | tr --squeeze-repeats \" \" \
                                        | cut --delimiter=\" \" --fields=2 \
                                        | xargs dive)'
            --bind 'ctrl-r:reload(docker ps --format \"table {{.ID}}\t{{.Image}}\t{{.RunningFor}}\t{{.Status}}\t{{.Ports}}\")'
            --query='$*'
            --header ' ^E: EXEC | Alt+E: PKGS | ^R: RELOAD | Alt+I: INSPECT | Enter: LOGS | Alt+Enter: DIVE'
            --header-lines 2"
            # ~/dotfiles/lib/fzf/fzf-tmux-digdown -p90%
            docker-ps-format | FZF_DEFAULT_OPTS="${opts}"
            return 0
        }

    fi

    unset has_fzf_tab_func

fi
