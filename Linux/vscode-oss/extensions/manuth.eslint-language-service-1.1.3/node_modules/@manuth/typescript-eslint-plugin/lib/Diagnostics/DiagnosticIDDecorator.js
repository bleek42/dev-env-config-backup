"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticIDDecorator = void 0;
const Constants_1 = require("../Constants");
/**
 * Provides the functionality to decorate fix-ids.
 */
class DiagnosticIDDecorator {
    /**
     * Initializes a new instance of the {@link FixIDDecorator `FixIDDecorator`} class.
     */
    constructor() {
        /**
         * A character for separating decorators.
         */
        this.separator = ":";
        /**
         * A set of characters for indicating a combined fix.
         */
        this.combinedFixDecorator = "all";
        /**
         * A set of characters for indicating a disable fix.
         */
        this.disableFixDecorator = "disable";
    }
    /**
     * Gets the decorator.
     */
    get Decorator() {
        return Constants_1.Constants.FixIdDecorator;
    }
    /**
     * Gets a character for separating decorators.
     */
    get Separator() {
        return this.separator;
    }
    /**
     * Gets a set of characters for indicating a combined fix.
     */
    get CombinedFixDecorator() {
        return this.combinedFixDecorator;
    }
    /**
     * Gets a set of characters for indicating a disable fix.
     */
    get DisableFixDecorator() {
        return this.disableFixDecorator;
    }
    /**
     * Decorates a fix-id.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated {@link fixId `fixId`}.
     */
    DecorateFix(fixId) {
        return this.AddPrefix(fixId, this.Decorator);
    }
    /**
     * Decorates a combined fix-id.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated {@link fixId `fixId`}.
     */
    DecorateCombinedFix(fixId) {
        return this.DecorateFix(this.AddPrefix(fixId, this.CombinedFixDecorator));
    }
    /**
     * Decorates a fix-id for disabling a check.
     *
     * @param fixId
     * The fix-id to decorate.
     *
     * @returns
     * The decorated fix.
     */
    DecorateDisableFix(fixId) {
        return this.DecorateFix(this.AddPrefix(fixId, this.DisableFixDecorator));
    }
    /**
     * Removes the decoration from a fix-id.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateFix(fixId) {
        return this.StripPrefix(fixId, this.Decorator);
    }
    /**
     * Removes the decoration from a combined fix-id.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateCombinedFix(fixId) {
        return this.StripPrefix(this.UndecorateFix(fixId), this.CombinedFixDecorator);
    }
    /**
     * Removes the decoration from a fix-id for disabling a check.
     *
     * @param fixId
     * The fix-id to remove the decoration from.
     *
     * @returns
     * The fix-id with its decoration removed.
     */
    UndecorateDisableFix(fixId) {
        return this.StripPrefix(this.UndecorateFix(fixId), this.DisableFixDecorator);
    }
    /**
     * Adds the specified {@link prefix `prefix`} to the specified {@link subject `subject`}.
     *
     * @param subject
     * The fix-id to add the specified {@link prefix `prefix`} to.
     *
     * @param prefix
     * The prefix to add to the specified {@link subject `subject`}.
     *
     * @returns
     * The specified {@link subject `subject`} prefixed with the specified {@link prefix `prefix`}.
     */
    AddPrefix(subject, prefix) {
        return `${prefix}${this.separator}${subject}`;
    }
    /**
     * Strips the specified {@link prefix `prefix`} from the specified {@link subject `subject`}.
     *
     * @param subject
     * The fix-id to strip the specified {@link prefix `prefix`} from.
     *
     * @param prefix
     * The prefix to strip from the specified {@link subject `subject`}.
     *
     * @returns
     * The {@link subject `subject`} with its {@link prefix `prefix`} stripped away.
     */
    StripPrefix(subject, prefix) {
        let ruleNameKey = "ruleName";
        return new RegExp(`^${prefix}${this.separator}(?<${ruleNameKey}>.*$)`).exec(subject).groups[ruleNameKey];
    }
}
exports.DiagnosticIDDecorator = DiagnosticIDDecorator;
//# sourceMappingURL=DiagnosticIDDecorator.js.map