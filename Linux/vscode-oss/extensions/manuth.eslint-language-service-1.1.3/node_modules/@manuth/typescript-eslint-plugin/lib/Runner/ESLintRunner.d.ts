import eslint = require("eslint");
import type ts = require("typescript/lib/tsserverlibrary");
import { IDiagnostic } from "../Diagnostics/IDiagnostic";
import { LabeledLogger } from "../Logging/LabeledLogger";
import { LoggerBase } from "../Logging/LoggerBase";
import { Plugin } from "../Plugin";
import { Configuration } from "../Settings/Configuration";
/**
 * Provides the functionality to run `eslint`.
 */
export declare class ESLintRunner {
    /**
     * The plugin of this runner.
     */
    private plugin;
    /**
     * A set of documents and functions for resolving their linter.
     */
    private document2LibraryCache;
    /**
     * The paths to the package-managers.
     */
    private packageManagerPaths;
    /**
     * Initializes a new instance of the {@link ESLintRunner `ESLintRunner`} class.
     *
     * @param plugin
     * The plugin of the runner.
     */
    constructor(plugin: Plugin);
    /**
     * Gets the plugin of the runner.
     */
    get Plugin(): Plugin;
    /**
     * Gets the typescript-server.
     */
    get TypeScript(): typeof ts;
    /**
     * Gets a component for writing log-messages.
     */
    get RealLogger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get Logger(): LoggerBase;
    /**
     * Gets a component for writing log-messages.
     */
    get RunnerLogger(): LabeledLogger;
    /**
     * Gets the configuration of the plugin.
     */
    get Config(): Configuration;
    /**
     * Gets the program of the language-server.
     */
    get Program(): ts.Program;
    /**
     * Gets the language-service host.
     */
    get LanguageServiceHost(): ts.LanguageServiceHost;
    /**
     * Checks a file using `eslint`.
     *
     * @param file
     * The file to check.
     *
     * @returns
     * The result of the lint.
     */
    RunESLint(file: ts.SourceFile): IDiagnostic[];
    /**
     * Checks a file using `eslint`.
     *
     * @param file
     * The file to check.
     *
     * @param linter
     * The linter.
     *
     * @returns
     * The result of the lint.
     */
    protected Run(file: ts.SourceFile, linter: eslint.CLIEngine): IDiagnostic[];
    /**
     * Determines the path to the specified {@link packageManager `packageManager`}.
     *
     * @param packageManager
     * The package-manager to get the path of.
     *
     * @returns
     * The path to the global module-directory of the specified {@link PackageManager `PackageManager`}.
     */
    private GetPackageManagerPath;
    /**
     * Loads the {@link CLIEngine `CLIEngine`} for the file with the specified {@link filePath `filePath`}.
     *
     * @param filePath
     * The file to check.
     *
     * @returns
     * A method for loading the {@link CLIEngine `CLIEngine`}.
     */
    private LoadLibrary;
    /**
     * Resolves the path to the `eslint`-library.
     *
     * @param nodePath
     * The path to resolve globally installed modules.
     *
     * @param cwd
     * The directory to resolve `eslint` from.
     *
     * @returns
     * The path to the `eslint`-module.
     */
    private ResolveESLint;
}
