import { Dictionary } from "../Collections/Dictionary";
import { List } from "../Collections/List";
import { IDependencyCollection } from "./IDependencyCollection";
import { IDependencyCollectionOptions } from "./IDependencyCollectionOptions";
/**
 * Represents a set of dependencies.
 */
export declare class DependencyCollection implements IDependencyCollection {
    /**
     * The normal dependencies.
     */
    private readonly dependencies;
    /**
     * The dependencies for development purposes.
     */
    private readonly devDependencies;
    /**
     * The peer-dependencies.
     */
    private readonly peerDependencies;
    /**
     * The optional dependencies.
     */
    private readonly optionalDependencies;
    /**
     * The bundled dependencies.
     */
    private readonly bundledDependencies;
    /**
     * Initializes a new instance of the {@link DependencyCollection `DependencyCollection`} class.
     */
    constructor();
    /**
     * Initializes a new instance of the {@link DependencyCollection `DependencyCollection`} class.
     *
     * @param collection
     * The base collection.
     */
    constructor(collection: IDependencyCollectionOptions);
    /**
     * @inheritdoc
     */
    get AllDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get Dependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get DevelopmentDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get PeerDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get OptionalDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get BundledDependencies(): List<string>;
    /**
     * @inheritdoc
     *
     * @param collection
     * The collection to register.
     *
     * @param overwrite
     * A value indicating whether existing dependencies should be overwritten.
     */
    Register(collection: IDependencyCollection, overwrite?: boolean): void;
    /**
     * Clears all dependencies from the collection.
     */
    Clear(): void;
    /**
     * Loads a dictionary which contains dependencies and corresponding versions.
     *
     * @param source
     * The object which contains the dependencies to load.
     *
     * @returns
     * The dependency-dictionary.
     */
    protected LoadDependencyDictionary(source: Record<string, string>): Dictionary<string, string>;
    /**
     * Loads a list of dependencies.
     *
     * @param source
     * A set of dependencies to load.
     *
     * @returns
     * The newly created dependency-list.
     */
    protected LoadDependencyList(source: string[]): List<string>;
}
