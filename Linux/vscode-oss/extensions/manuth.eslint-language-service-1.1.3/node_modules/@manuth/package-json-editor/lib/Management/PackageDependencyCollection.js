"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageDependencyCollection = void 0;
const Dictionary_1 = require("../Collections/Dictionary");
const DependencyCollection_1 = require("./DependencyCollection");
/**
 * Provides a set of dependencies which are loaded from a package.
 */
class PackageDependencyCollection extends DependencyCollection_1.DependencyCollection {
    /**
     * Initializes a new instance of the {@link PackageDependencyCollection `PackageDependencyCollection`} class.
     *
     * @param sourcePackage
     * The package to load the specified {@link dependencies `dependencies`} from.
     *
     * @param dependencies
     * The dependencies to load from the specified {@link sourcePackage `sourcePackage`}.
     */
    constructor(sourcePackage, dependencies) {
        super();
        this.sourcePackage = sourcePackage;
        this.dependencyNames = dependencies;
    }
    /**
     * Gets the package to load the dependencies with the specified {@link PackageDependencyCollection.DependencyNames `DependencyNames`} from.
     */
    get Package() {
        return this.sourcePackage;
    }
    /**
     * Gets the dependencies to load from the specified {@link PackageDependencyCollection.Package `Package`}.
     */
    get DependencyNames() {
        return this.dependencyNames;
    }
    /**
     * @inheritdoc
     */
    get Dependencies() {
        return this.LoadDependencies("dependencies");
    }
    /**
     * @inheritdoc
     */
    get DevelopmentDependencies() {
        return this.LoadDependencies("devDependencies");
    }
    /**
     * @inheritdoc
     */
    get PeerDependencies() {
        return this.LoadDependencies("peerDependencies");
    }
    /**
     * @inheritdoc
     */
    get OptionalDependencies() {
        return this.LoadDependencies("optionalDependencies");
    }
    /**
     * Loads the dependencies specified in the list with the specified {@link listName `listName`} from the specified {@link packageListName `packageListName`} in the {@link PackageDependencyCollection.Package `Package`}.
     *
     * @param listName
     * The name of the list of dependency-names to load.
     *
     * @param packageListName
     * The name of the list of the package to load the dependency-versions from.
     *
     * @returns
     * The loaded dependencies.
     */
    LoadDependencies(listName, packageListName) {
        var _a;
        return this.LoadPackageDependencies((_a = this.DependencyNames[listName]) !== null && _a !== void 0 ? _a : [], packageListName);
    }
    /**
     * Loads the specified {@link dependencies `dependencies`} from the specified {@link packageListName `packageListName`} of the {@link PackageDependencyCollection.Package `Package`}.
     *
     * @param dependencies
     * The dependencies to load.
     *
     * @param packageListName
     * The name of the dependency-list in the package to load the specified {@link dependencies `dependencies`} from.
     *
     * @returns
     * The loaded dependencies.
     */
    LoadPackageDependencies(dependencies, packageListName = "AllDependencies") {
        return new Dictionary_1.Dictionary(dependencies.map((dependency) => {
            return [
                dependency,
                this.Package[packageListName].Get(dependency)
            ];
        }));
    }
}
exports.PackageDependencyCollection = PackageDependencyCollection;
//# sourceMappingURL=PackageDependencyCollection.js.map