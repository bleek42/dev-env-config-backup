import { Dictionary } from "../Collections/Dictionary";
import { Package } from "../Package";
import { DependencyCollection } from "./DependencyCollection";
import { KeyOfType } from "./KeyOfType";
import { PackageDependencyCollectionOptions } from "./PackageDependencyCollectionOptions";
/**
 * Provides a set of dependencies which are loaded from a package.
 */
export declare class PackageDependencyCollection extends DependencyCollection {
    /**
     * The package to load the dependencies from.
     */
    private sourcePackage;
    /**
     * The names of the dependencies to load from the {@link PackageDependencyCollection.sourcePackage `sourcePackage`};
     */
    private dependencyNames;
    /**
     * Initializes a new instance of the {@link PackageDependencyCollection `PackageDependencyCollection`} class.
     *
     * @param sourcePackage
     * The package to load the specified {@link dependencies `dependencies`} from.
     *
     * @param dependencies
     * The dependencies to load from the specified {@link sourcePackage `sourcePackage`}.
     */
    constructor(sourcePackage: Package, dependencies: PackageDependencyCollectionOptions);
    /**
     * Gets the package to load the dependencies with the specified {@link PackageDependencyCollection.DependencyNames `DependencyNames`} from.
     */
    protected get Package(): Package;
    /**
     * Gets the dependencies to load from the specified {@link PackageDependencyCollection.Package `Package`}.
     */
    protected get DependencyNames(): PackageDependencyCollectionOptions;
    /**
     * @inheritdoc
     */
    get Dependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get DevelopmentDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get PeerDependencies(): Dictionary<string, string>;
    /**
     * @inheritdoc
     */
    get OptionalDependencies(): Dictionary<string, string>;
    /**
     * Loads the dependencies specified in the list with the specified {@link listName `listName`} from the {@link PackageDependencyCollection.Package `Package`}.
     *
     * @param listName
     * The name of the list of dependency-names to load.
     *
     * @returns
     * The loaded dependencies.
     */
    protected LoadDependencies(listName: keyof PackageDependencyCollectionOptions): Dictionary<string, string>;
    /**
     * Loads the dependencies specified in the list with the specified {@link listName `listName`} from the specified {@link packageListName `packageListName`} in the {@link PackageDependencyCollection.Package `Package`}.
     *
     * @param listName
     * The name of the list of dependency-names to load.
     *
     * @param packageListName
     * The name of the list of the package to load the dependency-versions from.
     *
     * @returns
     * The loaded dependencies.
     */
    protected LoadDependencies(listName: keyof PackageDependencyCollectionOptions, packageListName: KeyOfType<DependencyCollection, Dictionary<string, string>>): Dictionary<string, string>;
    /**
     * Loads the specified {@link dependencies `dependencies`} from the specified {@link packageListName `packageListName`} of the {@link PackageDependencyCollection.Package `Package`}.
     *
     * @param dependencies
     * The dependencies to load.
     *
     * @param packageListName
     * The name of the dependency-list in the package to load the specified {@link dependencies `dependencies`} from.
     *
     * @returns
     * The loaded dependencies.
     */
    protected LoadPackageDependencies(dependencies: string[], packageListName?: KeyOfType<DependencyCollection, Dictionary<string, string>>): Dictionary<string, string>;
}
