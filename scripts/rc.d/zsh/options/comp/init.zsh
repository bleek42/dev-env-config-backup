#!/usr/bin/env zsh

###*-ZSH COMPLETION OPTIONS------------------------------------------------------------------------#
###* https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Description                    #
###* https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System               #
###* https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Configuration #
## ? Figuring out keyboard sequences in the current terminal ##################
## ? The journey towards "the perfect key definitions"[tm].
## ?
## ?   THIS IS INCOMPLETE.
## ?
## ? We'll go about it like this:
## ?   - if there's zsh/terminfo and $terminfo[] "looks good", use it.
## ?   - if there's zsh/termcap and $termcap[] "looks good", use it.
## ?   - if neither is there, fall back to zkbd.
## ?   - if zkbd fails for some reason, create a setup-file-skeleton
## ?     for the terminal-OS combination in question.
## ?
## ? Slight deviation from the rules, we just established:
## ?   If the user marks a database entry as broken, directly fall back
## ?   to zkbd:
## ? % zstyle ':keyboard:$VENDOR:$OSTYPE:$TERM:*:*' broken (terminfo|termcap|both)
## ?
## ?   Also, allow for overwriting key definitions:
## ? % zstyle ':keyboard:$VENDOR:$OSTYPE:$TERM:terminfo:Home' overwrite $'\e[1~'
## ?
## ? Styles *have* to be set *before* sourcing this file.
## ? Also, this files expects pretty much zsh-mode default options. So,
## ? set your crazy options *after* sourcing this file.
## ?
## ? Note, that this file does *NOT* bind anything for you. It merely
## ? populates the $key[] hash, which you can later use to bind your keys,
## ? like this:
## ?   [[ -n ${key[Home]} ]] && bindkey ${key[Home]} beginning-of-line
## ?
###*################################################################################################
###*################################################################################################

zmodload zsh/complist

### ? shell emulation options
setopt posix_builtins  # ! when set, the command 'builtin' can be used to execute shell builtins
unsetopt sh_word_split # ! enable to use zsh style word splitting, disable to split fields on unquoted parameter expansions (bash compatibility)
unsetopt flow_control  # ! disable flow control (stop/start with ctrl-s/ctrl-q)

### ? prompt / substring options
setopt prompt_subst      # ! enable command substitution in prompt
setopt magic_equal_subst # ! enable filename expansion for arguments of the form ‘anything=expression’

### ? completion option
setopt auto_menu     # ! show completion menu on successive tab press
setopt auto_list     # ! automatically list choices on ambiguous completion
setopt complete_in_word
setopt always_to_end    # ! move cursor to the end of a completed word
setopt complete_aliases # ! don't expand aliases _before_ completion has finished
setopt auto_param_keys  # ! intelligently remove automatically inserted characters when completing
setopt auto_param_slash # ! when completing a directory name add a slash instead of a space
setopt hash_list_all    # ! whenever a command completion is attempted, make sure the entire command path is hashed first
setopt complete_in_word # ! allow completion from within a word/phrase
setopt always_to_end    # ! move cursor to the end of a completed word
setopt list_types       # ! mark type of completion suggestions

setopt no_clobber       # ! Don't overwrite files with >. Use >| to bypass.
setopt no_correct        # ! auto correct mistakes
setopt no_menu_complete # ! disable/enable menu completion

### ? in/output options
setopt mark_dirs # ! append '/' to dirnames generated by globbing
setopt no_match   # ! print an error if a glob didn't return a result

setopt pushd_to_home      # ! Push to home dir when no arg is given
# setopt rm_star_wait     # ! wait for 10 seconds confirmation when running rm with *
# setopt rm_star_silent # ! notify when rm is running with *

# COMPLETION_WAITING_DOTS=true

## ? How many completions should be shown in menu selection
zstyle ':completion:*' menu=long select interactive
zstyle ':completion:*:*:*:*:*' menu=3 select interactive # ? How many completions switch on menu selection
zstyle ':completion:*' accept-exact '*(N)'          # ? Prevent comp to glob the first part of the path to avoid partial globs. (Performance)
zstyle ':completion:*' complete true
zstyle ':completion:*' rehash true
zstyle ':completion:*' keep-prefix true
zstyle ':completion:*' special-dirs true ## ? Complete . and .. special directories
zstyle ':completion:*' verbose yes
zstyle ':completion:*' file-sort name
zstyle ':completion:*' use-cache on ## ? Use caching so that commands like apt and dpkg complete are useable
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
zstyle ':completion:*' group-name '' ## ? Required for completion to be in good groups (named after the tags)


## ? Adjust color-completion style
# if [[ -d "${SHELLRCD}/common/lscolors"]]; then

#     test -r "${SHELLRCD}/common/lscolors/jellybeans.bash" && \
#         source "${SHELLRCD}/common/lscolors/jellybeans.bash"

#     zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"
#     ZLS_COLORS="$LS_COLORS"
#     export LS_COLORS ZLS_COLORS
# fi

if [[ -z $LS_COLORS ]]; then

    if [[ -x $(command -v vivid) ]]; then

        LS_COLORS="$(vivid generate jellybeans)"
        ZLS_COLORS="$LS_COLORS"
        export LS_COLORS ZLS_COLORS

    fi

    zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"

else

    ZLS_COLORS="$LS_COLORS"
    zstyle ':completion:*:default' list-colors "${(s.:.)LS_COLORS}"
    export LS_COLORS ZLS_COLORS

fi

# zstyle -e ':completion:*:*:*:*' list-colors \
#     'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==34=12}:${(s.:.)LS_COLORS}")'

## ? case insensitive (all), partial-word and substring completion
if [[ "$CASE_SENSITIVE" = true ]]; then
    zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
else
    if [[ "$HYPHEN_INSENSITIVE" = true ]]; then
        zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]-_}={[:upper:][:lower:]_-}' 'r:|=*' 'l:|=* r:|=*'
    else
        zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|=*' 'l:|=* r:|=*'
    fi
fi
unset CASE_SENSITIVE HYPHEN_INSENSITIVE

zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric

## ! The +X flag makes the function load faster by disabling the tracing of the function body.
autoload -Uz _expand _complete _match _extensions _generic _ignored _files .force_rehash
# zle -C .force_rehash
# zstyle ':completion:*' completer _expand _complete _match _ignored _files _extensions
# zstyle ':completion:*' completer _expand .force_rehash _complete _match _files _extensions
zstyle ':completion:*' completer _expand _complete _match _files _extensions _ignored
## ! Complete the alias when _expand_alias is used as a function
# autoload -Uz _expand_alias
# zle -C alias-expansion complete-word _generic
# bindkey '^Xa' alias-expansion
# zstyle ':completion:alias-expansion:*' completer _expand_alias _complete _generic

# Fuzzy match mistyped completions.

## ? Define completers
zstyle ':completion:*:expand:*' tag-order all-expansions
zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins commands functions options parameters reserved-words

# zstyle ':completion:*:aliases' list-colors '=*=0;38;2;166;226;46'
# zstyle ':completion:*:builtins' list-colors '=*=0;38;2;253;151'
# zstyle ':completion:*:functions' list-colors '=*=0;38;2;243;249;157'
# zstyle ':completion:*:commands' list-colors '=*=0;38;2;165;255;195'
# zstyle ':completion:*:options' list-colors '=*=0;38;2;153;173;106'
# zstyle ':completion:*:parameters' list-colors '=*=0;38;2;210;15;57'
# zstyle ':completion:*:reserved-words' list-colors '=*=0;38;2;0;255;135'

# ## ! disable sort when completing options of any command
zstyle ':completion:complete:*:options' sort false

zstyle ':completion:*:options' description yes
zstyle ':completion:*:options' auto-description '[%d]'

zstyle ':completion:*' list-prompt '󰄾 %l 󱔢'
zstyle ':completion:*' select-prompt '* %m -> %l %p'

# zstyle ':completion:default' list-prompt '⌾ %l ⎢'
# -zstyle ':completion:*:default' select-prompt \
# -    "${fg[118]}* ${fg[046]}%m ${fg[226]}-> ${fg[118]}%l ${fg[222]}%p${fx[reset]}"

zstyle ':completion:*:default' format '» %d'
zstyle ':completion:*:descriptions' format '[ %d ]'
zstyle ':completion:*:corrections' format '» ⨯ (%d / %e)'
zstyle ':completion:*:messages' format '»  ( %d )'
zstyle ':completion:*:warnings' format '» ⚠ ( %d )'

# Array completion element sorting.
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Environment Variables
zstyle ':completion::*:(-command-|export):*' fake-parameters \
    "${${${_comps[(I)-value-*]#*,}%%,*}:#-*-}"

## ! Only display some tags for the command cd
zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
zstyle ':completion:*:*:(cd|zd):*' tag-order local-directories directory-stack path-directories
zstyle ':completion:*:*:(cd|zd):*:directory-stack' menu yes select
zstyle ':completion:*' squeeze-slashes true

# Ignore multiple entries.
zstyle ':completion:*:(rm|kill|diff):*' ignore-line other
zstyle ':completion:*:rm:*' file-patterns '*:all-files'

# History
zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list false
zstyle ':completion:*:history-words' menu yes

# -zstyle ':completion:*:*:*:*' format \
# -    "${fg_bold[118]}»»${fg[102]}%d${fg_bold[118]}««${fx[reset]}"

# -zstyle ':completion:*:*:*:*:descriptions' format \
# -    "${fg[046]}»»[${fg[104]}%d${fg[046]}]««${fx[reset]}"

# -zstyle ':completion:*:*:*:*:corrections' format \
# -    "${fg[118]}[ ${fg[75]}󱋴  %d ${fg[118]}] ${fg[105]}(  %e )${fx[reset]}"

# -zstyle ':completion:*:*:*:*:messages' format \
# -    "${fg[046]}[ ${fg[105]}󱋵 %d${fg[046]}]${fx[reset]}"

# -zstyle ':completion:*:*:*:*:warnings' format \
# -    "${fg[155]}[ ${fg[118]} %d ${fg[155]}]${fx[reset]}"

## ? Complete manual by their section
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*:man:*' menu select interactive

## ? Adjust mismatch handling - allow one error for every character typed in approximate completer
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

## ? Search path for sudo completion
zstyle ':completion::complete:*' gain-privileges 1
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
    /usr/local/bin \
    /usr/sbin \
    /usr/bin \
    /sbin \
    /bin \
    /usr/X11R6/bin

###?################################################################
## ? Host completion                                              ##
## ? Filter out wildcard host sections and offer them for         ##
## ? completion as hosts (e.g. for ssh, rsync, scp, ping, etc.)   ##
###?################################################################
typeset -ag hosts _etc_hosts _ssh_config _ssh_config_hosts
[[ -r ${HOME}/.ssh/known_hosts ]]  && \
    _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || \
   _ssh_hosts=()

[[ -r /etc/hosts ]] && \
    : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || \
    _etc_hosts=()

[[ -r ${HOME}/.ssh/config ]] && \
    _ssh_config_hosts=(${=${${${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }:#*\**}:#*\?*}}) || \
    _ssh_config_hosts=()

hosts=(
	"$HOST"
	"$_ssh_config_hosts[@]"
	"$_ssh_hosts[@]"
	"$_etc_hosts[@]"
)

## ? SSH/SCP/RSYNC
if (( ${+commands[bat]} )); then
    zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync|ping):hosts' hosts \
        'reply=(${=${${(f)"$(command bat ${hosts}(|2)(N) /dev/null)"}%%[# ]*}//,/ })' || \

else
    zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync|ping):hosts' hosts \
        'reply=(${=${${(f)"$(command cat ${hosts}(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
fi

zstyle ':completion:*:(ssh|rsync|sftp|rsh):*' group-order users hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(scp|rsync|sftp|rsh):*' tag-order \
    'hosts:-host:host hosts:-domain:domain hosts:-ipaddr:ip\ address *'

zstyle ':completion:*:(scp|rsync|sftp|rsh):*' group-order users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-domain' ignored-patterns '<->.<->.<->.<->' '^[-[:alnum:]]##(.[-[:alnum:]]##)##' '*@*'
zstyle ':completion:*:(ssh|scp|rsync):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '255.255.255.255' '::1' 'fe80::*'

# Prevent these filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.(o|c~|old|pro|zwc)' '*~'

zstyle ':completion:*:*:(kill|killall|pkill):*' menu select interactive
zstyle ':completion:*:*:(kill|killall|pkill):*' force-list always
zstyle ':completion:*:*:(kill|killall|pkill):*' insert-ids single
zstyle ':completion:*:*:(kill|killall|pkill):*:processes' list-colors '=(#b) #([0-9]#)*( *[a-z])*=34=31=33'

zstyle ':completion:*:*:(killall|pkill):*:processes-names' list-colors '=(#b) #([0-9]#) ([0-9a-z\-]#)*=01;34=0=01'

# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,user,cmd -w -w '
zstyle ':completion:*:*:*:*:processes' command 'ps -u $USER -o pid,%cpu,tty,user,cmd -w -w'


# Media Players
zstyle ':completion:*:*:mpg123:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:mpg321:*' file-patterns '*.(mp3|MP3):mp3\ files *(-/):directories'
zstyle ':completion:*:*:ogg123:*' file-patterns '*.(ogg|OGG|flac):ogg\ files *(-/):directories'
zstyle ':completion:*:*:mocp:*' file-patterns '*.(wav|WAV|mp3|MP3|ogg|OGG|flac):ogg\ files *(-/):directories'

## ? a Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
    adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
    clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
    gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
    ldap lp mail mailman mailnull man messagebus mldonkey mysql nagios \
    named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
    operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
    rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
    usbmux uucp vcsa wwwrun xfs '_*'

## ! disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

zstyle '*' single-ignored show

## ? automatically load bash completion functions
autoload -U +X bashcompinit && bashcompinit
