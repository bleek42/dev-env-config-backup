# interpreter for shell commands
set shell zsh

set shellflag '-c'
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10
set icons true
set drawbox true
set reverse true
set period 1

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"
set dirpreviews true

set hidden true
set hiddenfiles '!*.zwc:!*.bak:!*.git,!*.gitignore,!*.gitattributes,!*.swp'

set incsearch true
set incfilter true

set dupfilefmt '%b.copy%n%e'

set truncatechar '-'

# set previewer ~/.lessfilter
set previewer ~/.config/lf/scripts/prev.sh
set cleaner ~/.config/lf/scripts/clean.sh

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.cache/trash

# use spacebar key for shell commands
map <space> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# define a custom 'open' command
cmd open $"$OPENER" "$fx"
cmd open-choose $OPENER_CHOOSE="true" "$OPENER" "$fx"

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
# # dedicated keys for file opener actions
# map o open
# map O open-choose

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

cmd toggle-preview %{{
    if [ "$lf_preview" = true ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map <c-_> :toggle-preview


# mkdir command. See wiki if you want it to select created dir
cmd mkdirs %IFS=" "; mkdir -- "$*"
cmd mknestdirs %{{
    IFS=" "
    file="$*"
    mkdir -p -- "$file"
    lf -remote "send $id select \"$(printf '%s' "$file" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

map a push :mkdirs<space>
map <f-7> push :mkdir<space>

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.cache/trash

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
map <delete> delete
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -laF --group-directories-first --color-scale "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

cmd zcd %{{
    result="$(zoxide query -l --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}


cmd zcdi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &zoxide add "$PWD"

# map <home> :zcd "$HOME"
map gh :zcd


# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
            tar xjvf $f
        ;;
        *.tar.gz|*.tgz)
            tar xzvf $f
        ;;
        *.tar.xz|*.txz)
            tar xJvf $f
        ;;
        *.zip)
            unzip $f
        ;;
        *.rar)
            unrar x $f
        ;;
        *.7z)
            7z x $f
        ;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd eval &{{
    cmd="send $id"
    for arg; do
        cmd="$cmd $(eval "printf '%s' \"$arg\"" | sed 's/\\/\\\\/g;s/ /\\ /g;s/"/\\"/g')"
    done
    lf -remote "$cmd"
}}

cmd node_script ${{
    script="$(command jq -r '.scripts | keys[]' <package.json | command sort | command fzf --height 20%)"
    npm run "$script"
}}

cmd fzf_jump ${{

    res="$(command fd -i --max-depth 1 . || find . -maxdepth 1 | command fzf --reverse --header="Jump to location")"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}

map <c-f> :fzf_jump






&[ "$LF_LEVEL" -eq 1 ] || lf -remote "send $id echoerr \"Warning: You're in a nested lf instance!\""
